/*
 * generated by Xtext
 */
package org.xtext.java.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.java.java.Ampersand_Rule;
import org.xtext.java.java.Arg_List;
import org.xtext.java.java.Bit_Expression_NR;
import org.xtext.java.java.Cast_Expression;
import org.xtext.java.java.Class_declaration;
import org.xtext.java.java.Compilation_unit;
import org.xtext.java.java.Constructor_declaration;
import org.xtext.java.java.Creating_Expression;
import org.xtext.java.java.Do_Statement;
import org.xtext.java.java.Expression;
import org.xtext.java.java.Expression_aux;
import org.xtext.java.java.Field_declaration;
import org.xtext.java.java.Float_Literal;
import org.xtext.java.java.For_Statement;
import org.xtext.java.java.Head;
import org.xtext.java.java.If_Statement;
import org.xtext.java.java.Import_statement;
import org.xtext.java.java.Interface_declaration;
import org.xtext.java.java.JavaPackage;
import org.xtext.java.java.Literal_Expression;
import org.xtext.java.java.Logical_Expression_NR;
import org.xtext.java.java.Method_call;
import org.xtext.java.java.Method_declaration;
import org.xtext.java.java.Numeric_Expression_NR;
import org.xtext.java.java.Package_statement;
import org.xtext.java.java.Parameter_list;
import org.xtext.java.java.Parameter_list_method_call;
import org.xtext.java.java.Return_Statement;
import org.xtext.java.java.Return_value;
import org.xtext.java.java.Statement;
import org.xtext.java.java.Statement_block;
import org.xtext.java.java.Static_initializer;
import org.xtext.java.java.Switch_Statement;
import org.xtext.java.java.Try_statement;
import org.xtext.java.java.Type;
import org.xtext.java.java.Type_declaration;
import org.xtext.java.java.Variable_declaration;
import org.xtext.java.java.Variable_declarator;
import org.xtext.java.java.Variable_initializer;
import org.xtext.java.java.While_Statement;
import org.xtext.java.services.JavaGrammarAccess;

@SuppressWarnings("all")
public class JavaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JavaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JavaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JavaPackage.AMPERSAND_RULE:
				sequence_Ampersand_Rule(context, (Ampersand_Rule) semanticObject); 
				return; 
			case JavaPackage.ARG_LIST:
				sequence_Arg_List(context, (Arg_List) semanticObject); 
				return; 
			case JavaPackage.BIT_EXPRESSION_NR:
				sequence_Bit_Expression_NR(context, (Bit_Expression_NR) semanticObject); 
				return; 
			case JavaPackage.CAST_EXPRESSION:
				sequence_Cast_Expression(context, (Cast_Expression) semanticObject); 
				return; 
			case JavaPackage.CLASS_DECLARATION:
				sequence_Class_declaration(context, (Class_declaration) semanticObject); 
				return; 
			case JavaPackage.COMPILATION_UNIT:
				sequence_Compilation_unit(context, (Compilation_unit) semanticObject); 
				return; 
			case JavaPackage.CONSTRUCTOR_DECLARATION:
				sequence_Constructor_declaration(context, (Constructor_declaration) semanticObject); 
				return; 
			case JavaPackage.CREATING_EXPRESSION:
				sequence_Creating_Expression(context, (Creating_Expression) semanticObject); 
				return; 
			case JavaPackage.DO_STATEMENT:
				sequence_Do_Statement(context, (Do_Statement) semanticObject); 
				return; 
			case JavaPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case JavaPackage.EXPRESSION_AUX:
				sequence_Expression_aux(context, (Expression_aux) semanticObject); 
				return; 
			case JavaPackage.FIELD_DECLARATION:
				sequence_Field_declaration(context, (Field_declaration) semanticObject); 
				return; 
			case JavaPackage.FLOAT_LITERAL:
				sequence_Float_Literal(context, (Float_Literal) semanticObject); 
				return; 
			case JavaPackage.FOR_STATEMENT:
				sequence_For_Statement(context, (For_Statement) semanticObject); 
				return; 
			case JavaPackage.HEAD:
				sequence_Head(context, (Head) semanticObject); 
				return; 
			case JavaPackage.IF_STATEMENT:
				sequence_If_Statement(context, (If_Statement) semanticObject); 
				return; 
			case JavaPackage.IMPORT_STATEMENT:
				sequence_Import_statement(context, (Import_statement) semanticObject); 
				return; 
			case JavaPackage.INTERFACE_DECLARATION:
				sequence_Interface_declaration(context, (Interface_declaration) semanticObject); 
				return; 
			case JavaPackage.LITERAL_EXPRESSION:
				sequence_Literal_Expression(context, (Literal_Expression) semanticObject); 
				return; 
			case JavaPackage.LOGICAL_EXPRESSION_NR:
				sequence_Logical_Expression_NR(context, (Logical_Expression_NR) semanticObject); 
				return; 
			case JavaPackage.METHOD_CALL:
				sequence_Method_call(context, (Method_call) semanticObject); 
				return; 
			case JavaPackage.METHOD_DECLARATION:
				sequence_Method_declaration(context, (Method_declaration) semanticObject); 
				return; 
			case JavaPackage.NUMERIC_EXPRESSION_NR:
				sequence_Numeric_Expression_NR(context, (Numeric_Expression_NR) semanticObject); 
				return; 
			case JavaPackage.PACKAGE_STATEMENT:
				sequence_Package_statement(context, (Package_statement) semanticObject); 
				return; 
			case JavaPackage.PARAMETER:
				sequence_Parameter(context, (org.xtext.java.java.Parameter) semanticObject); 
				return; 
			case JavaPackage.PARAMETER_LIST:
				sequence_Parameter_list(context, (Parameter_list) semanticObject); 
				return; 
			case JavaPackage.PARAMETER_LIST_METHOD_CALL:
				sequence_Parameter_list_method_call(context, (Parameter_list_method_call) semanticObject); 
				return; 
			case JavaPackage.RETURN_STATEMENT:
				sequence_Return_Statement(context, (Return_Statement) semanticObject); 
				return; 
			case JavaPackage.RETURN_VALUE:
				sequence_Return_value(context, (Return_value) semanticObject); 
				return; 
			case JavaPackage.STATEMENT:
				sequence_Statement(context, (Statement) semanticObject); 
				return; 
			case JavaPackage.STATEMENT_BLOCK:
				sequence_Statement_block(context, (Statement_block) semanticObject); 
				return; 
			case JavaPackage.STATIC_INITIALIZER:
				sequence_Static_initializer(context, (Static_initializer) semanticObject); 
				return; 
			case JavaPackage.SWITCH_STATEMENT:
				sequence_Switch_Statement(context, (Switch_Statement) semanticObject); 
				return; 
			case JavaPackage.TRY_STATEMENT:
				sequence_Try_statement(context, (Try_statement) semanticObject); 
				return; 
			case JavaPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case JavaPackage.TYPE_DECLARATION:
				sequence_Type_declaration(context, (Type_declaration) semanticObject); 
				return; 
			case JavaPackage.VARIABLE_DECLARATION:
				sequence_Variable_declaration(context, (Variable_declaration) semanticObject); 
				return; 
			case JavaPackage.VARIABLE_DECLARATOR:
				sequence_Variable_declarator(context, (Variable_declarator) semanticObject); 
				return; 
			case JavaPackage.VARIABLE_INITIALIZER:
				sequence_Variable_initializer(context, (Variable_initializer) semanticObject); 
				return; 
			case JavaPackage.WHILE_STATEMENT:
				sequence_While_Statement(context, (While_Statement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Ampersand_Rule returns Ampersand_Rule
	 *
	 * Constraint:
	 *     (a1=AMPERSAND a2=AMPERSAND?)
	 */
	protected void sequence_Ampersand_Rule(ISerializationContext context, Ampersand_Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Arg_List returns Arg_List
	 *
	 * Constraint:
	 *     (expression=Expression expressions+=Expression*)
	 */
	protected void sequence_Arg_List(ISerializationContext context, Arg_List semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Bit_Expression_NR returns Bit_Expression_NR
	 *
	 * Constraint:
	 *     expression=Expression
	 */
	protected void sequence_Bit_Expression_NR(ISerializationContext context, Bit_Expression_NR semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.BIT_EXPRESSION_NR__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.BIT_EXPRESSION_NR__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBit_Expression_NRAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Cast_Expression returns Cast_Expression
	 *
	 * Constraint:
	 *     (type=Type expression=Expression)
	 */
	protected void sequence_Cast_Expression(ISerializationContext context, Cast_Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.CAST_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.CAST_EXPRESSION__TYPE));
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.CAST_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.CAST_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCast_ExpressionAccess().getTypeTypeParserRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getCast_ExpressionAccess().getExpressionExpressionParserRuleCall_3_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Class_declaration returns Class_declaration
	 *
	 * Constraint:
	 *     (modifiers+=Modifier* className=ID extend=Class_name? (implement=Interface_name implements+=Interface_name*)? fields+=Field_declaration*)
	 */
	protected void sequence_Class_declaration(ISerializationContext context, Class_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Compilation_unit returns Compilation_unit
	 *
	 * Constraint:
	 *     (package=Package_statement? imports+=Import_statement* type_declarations+=Type_declaration*)
	 */
	protected void sequence_Compilation_unit(ISerializationContext context, Compilation_unit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constructor_declaration returns Constructor_declaration
	 *
	 * Constraint:
	 *     (modifiers+=Modifier* name=ID parameters=Parameter_list? statement=Statement_block)
	 */
	protected void sequence_Constructor_declaration(ISerializationContext context, Constructor_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Creating_Expression returns Creating_Expression
	 *
	 * Constraint:
	 *     ((className=Class_name argList=Arg_List) | (typeSpecifier=Type_specifier expression=Expression?) | expression=Expression)
	 */
	protected void sequence_Creating_Expression(ISerializationContext context, Creating_Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Do_Statement returns Do_Statement
	 *
	 * Constraint:
	 *     (statement=Statement expression=Expression)
	 */
	protected void sequence_Do_Statement(ISerializationContext context, Do_Statement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.DO_STATEMENT__STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.DO_STATEMENT__STATEMENT));
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.DO_STATEMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.DO_STATEMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDo_StatementAccess().getStatementStatementParserRuleCall_1_0(), semanticObject.getStatement());
		feeder.accept(grammarAccess.getDo_StatementAccess().getExpressionExpressionParserRuleCall_4_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     (
	 *         (numericExpression3=Numeric_Expression_NR aux=Expression_aux) | 
	 *         (logicalExpression=Logical_Expression_NR aux=Expression_aux) | 
	 *         (bitExpression=Bit_Expression_NR aux=Expression_aux) | 
	 *         (castExpression=Cast_Expression aux=Expression_aux) | 
	 *         (creatingExpression=Creating_Expression aux=Expression_aux) | 
	 *         (literalExpression=Literal_Expression aux=Expression_aux) | 
	 *         (null=NULL aux=Expression_aux) | 
	 *         (super=SUPER aux=Expression_aux) | 
	 *         (this=THIS aux=Expression_aux) | 
	 *         (name=ID aux=Expression_aux)
	 *     )
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression_aux returns Expression_aux
	 *
	 * Constraint:
	 *     (
	 *         (argList=Arg_List? aux=Expression_aux) | 
	 *         (expression2=Expression aux=Expression_aux) | 
	 *         (expression2=Expression aux=Expression_aux) | 
	 *         (expressionComma=Expression aux=Expression_aux) | 
	 *         (name=Class_name aux=Expression_aux) | 
	 *         ((sgin=INCREMENT | sgin=DECREMENT) aux=Expression_aux) | 
	 *         (
	 *             (
	 *                 numericSign=PLUS | 
	 *                 numericSign=PLUS_EQUAL | 
	 *                 numericSign=MINUS | 
	 *                 numericSign=MINUS_EQUAL | 
	 *                 numericSign=MULTIPLY | 
	 *                 numericSign=MULTIPLY_EQUAL | 
	 *                 numericSign=DIVIDE | 
	 *                 numericSign=DIVIDE_EQUAL | 
	 *                 numericSign=MODULE | 
	 *                 numericSign=MODULE_EQUAL
	 *             ) 
	 *             exp2=Expression 
	 *             aux=Expression_aux
	 *         ) | 
	 *         (
	 *             (
	 *                 testingSign=BT | 
	 *                 testingSign=ST | 
	 *                 testingSign=BE | 
	 *                 testingSign=SE | 
	 *                 testingSign=DOUBLE_EQUAL | 
	 *                 testingSign=DIFFERENT
	 *             ) 
	 *             exp1=Expression 
	 *             aux=Expression_aux
	 *         ) | 
	 *         (
	 *             (
	 *                 logicalSign=OR | 
	 *                 logicalSign=OR_EQUAL | 
	 *                 logicalSign=EXP | 
	 *                 logicalSign=EXP_EQUAL | 
	 *                 logicalSign=DOUBLE_OR_EQUAL | 
	 *                 logicalSign=MODULE | 
	 *                 logicalSign=MODULE_EQUAL | 
	 *                 ampersand=Ampersand_Rule
	 *             ) 
	 *             exp1=Expression 
	 *             aux=Expression_aux
	 *         ) | 
	 *         (exp1=Expression exp2=Expression aux=Expression_aux) | 
	 *         ((stringSign=PLUS | stringSign=PLUS_EQUAL) exp1=Expression aux=Expression_aux) | 
	 *         ((bitSign=R_SHIFT_EQUAL | bitSign=L_SHIFT | bitSign=R_SHIFT | bitSign=SUPER_SHIFT) expressionBit=Expression aux=Expression_aux)
	 *     )?
	 */
	protected void sequence_Expression_aux(ISerializationContext context, Expression_aux semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field_declaration returns Field_declaration
	 *
	 * Constraint:
	 *     ((doc=DOC_COMMENT? (name=Variable_declaration | name=Constructor_declaration | name=Method_declaration)) | name=Static_initializer | debug=EOL)
	 */
	protected void sequence_Field_declaration(ISerializationContext context, Field_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Float_Literal returns Float_Literal
	 *
	 * Constraint:
	 *     (decimalDigits1=DECIMAL_DIGITS decimalDigits2=DECIMAL_DIGITS? exp=EXPOENT_PART?)
	 */
	protected void sequence_Float_Literal(ISerializationContext context, Float_Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     For_Statement returns For_Statement
	 *
	 * Constraint:
	 *     ((variable=Variable_declaration | expression=Expression | pv=EOL) expression2=Expression? expression3=Expression? statement=Statement)
	 */
	protected void sequence_For_Statement(ISerializationContext context, For_Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Head returns Head
	 *
	 * Constraint:
	 *     elements+=Compilation_unit
	 */
	protected void sequence_Head(ISerializationContext context, Head semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     If_Statement returns If_Statement
	 *
	 * Constraint:
	 *     (expression=Expression statement=Statement elseStatement=Statement?)
	 */
	protected void sequence_If_Statement(ISerializationContext context, If_Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import_statement returns Import_statement
	 *
	 * Constraint:
	 *     (classname=Class_name | packagename=Package_name)
	 */
	protected void sequence_Import_statement(ISerializationContext context, Import_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interface_declaration returns Interface_declaration
	 *
	 * Constraint:
	 *     (modifiers+=Modifier* interfaceName=ID (extend=Interface_name extends+=Interface_name*)? fields+=Field_declaration*)
	 */
	protected void sequence_Interface_declaration(ISerializationContext context, Interface_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Literal_Expression returns Literal_Expression
	 *     Return_value returns Literal_Expression
	 *
	 * Constraint:
	 *     (exp=HEXA | exp1=DECIMAL_DIGITS | exp2=Float_Literal | string=STRING | char=CHAR)
	 */
	protected void sequence_Literal_Expression(ISerializationContext context, Literal_Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Logical_Expression_NR returns Logical_Expression_NR
	 *
	 * Constraint:
	 *     (expression=Expression | true=TRUE | false=FALSE)
	 */
	protected void sequence_Logical_Expression_NR(ISerializationContext context, Logical_Expression_NR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Method_call returns Method_call
	 *     Return_value returns Method_call
	 *
	 * Constraint:
	 *     (name=ID parameter=Parameter_list_method_call?)
	 */
	protected void sequence_Method_call(ISerializationContext context, Method_call semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Method_declaration returns Method_declaration
	 *
	 * Constraint:
	 *     (modifiers+=Modifier* type=Type name=ID parameter=Parameter_list? (statement=Statement_block | debug=EOL))
	 */
	protected void sequence_Method_declaration(ISerializationContext context, Method_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Numeric_Expression_NR returns Numeric_Expression_NR
	 *
	 * Constraint:
	 *     ((sinal_numeric=MINUS | sinal_numeric=INCREMENT | sinal_numeric=DECREMENT) expression=Expression)
	 */
	protected void sequence_Numeric_Expression_NR(ISerializationContext context, Numeric_Expression_NR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Package_statement returns Package_statement
	 *
	 * Constraint:
	 *     name=Package_name
	 */
	protected void sequence_Package_statement(ISerializationContext context, Package_statement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.PACKAGE_STATEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.PACKAGE_STATEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPackage_statementAccess().getNamePackage_nameParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (type=Type name=ID)
	 */
	protected void sequence_Parameter(ISerializationContext context, org.xtext.java.java.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.PARAMETER__TYPE));
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Parameter_list returns Parameter_list
	 *
	 * Constraint:
	 *     (parameter=Parameter parameters+=Parameter*)
	 */
	protected void sequence_Parameter_list(ISerializationContext context, Parameter_list semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter_list_method_call returns Parameter_list_method_call
	 *
	 * Constraint:
	 *     (name=ID parameters+=ID*)
	 */
	protected void sequence_Parameter_list_method_call(ISerializationContext context, Parameter_list_method_call semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Return_Statement returns Return_Statement
	 *
	 * Constraint:
	 *     rv=Return_value?
	 */
	protected void sequence_Return_Statement(ISerializationContext context, Return_Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Return_value returns Return_value
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Return_value(ISerializationContext context, Return_value semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.RETURN_VALUE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.RETURN_VALUE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReturn_valueAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement
	 *
	 * Constraint:
	 *     (
	 *         returnSmt=Return_Statement | 
	 *         variable=Variable_declaration | 
	 *         expressionx=Expression | 
	 *         ifStatement=If_Statement | 
	 *         doStatement=Do_Statement | 
	 *         whileStatement=While_Statement | 
	 *         forStatement=For_Statement | 
	 *         switchStatement=Switch_Statement | 
	 *         statementBlock=Statement_block | 
	 *         try=Try_statement | 
	 *         (name=ID statement=Statement) | 
	 *         name=ID | 
	 *         name=ID | 
	 *         variableDeclarator=Variable_declarator
	 *     )?
	 */
	protected void sequence_Statement(ISerializationContext context, Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement_block returns Statement_block
	 *
	 * Constraint:
	 *     statements+=Statement*
	 */
	protected void sequence_Statement_block(ISerializationContext context, Statement_block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Static_initializer returns Static_initializer
	 *
	 * Constraint:
	 *     (static=STATIC name=Statement_block)
	 */
	protected void sequence_Static_initializer(ISerializationContext context, Static_initializer semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.STATIC_INITIALIZER__STATIC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.STATIC_INITIALIZER__STATIC));
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.STATIC_INITIALIZER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.STATIC_INITIALIZER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatic_initializerAccess().getStaticSTATICTerminalRuleCall_0_0(), semanticObject.getStatic());
		feeder.accept(grammarAccess.getStatic_initializerAccess().getNameStatement_blockParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Switch_Statement returns Switch_Statement
	 *
	 * Constraint:
	 *     (sw_exp=Expression (case_exp+=Expression | statements+=Statement)* case_exp+=Expression? (statements+=Statement? case_exp+=Expression?)*)
	 */
	protected void sequence_Switch_Statement(ISerializationContext context, Switch_Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Try_statement returns Try_statement
	 *
	 * Constraint:
	 *     (try=TRY tryStatement=Statement (catchs+=CATCH parameters+=Parameter catchStatements+=Statement)* (finally=FINALLY finallyStatement=Statement)?)
	 */
	protected void sequence_Try_statement(ISerializationContext context, Try_statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     name=Type_specifier
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getNameType_specifierParserRuleCall_0_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type_declaration returns Type_declaration
	 *
	 * Constraint:
	 *     (doc=DOC_COMMENT? (name=Class_declaration | name=Interface_declaration))
	 */
	protected void sequence_Type_declaration(ISerializationContext context, Type_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable_declaration returns Variable_declaration
	 *
	 * Constraint:
	 *     (modifiers+=Modifier* type=Type name=Variable_declarator names+=Variable_declarator*)
	 */
	protected void sequence_Variable_declaration(ISerializationContext context, Variable_declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable_declarator returns Variable_declarator
	 *
	 * Constraint:
	 *     (name=ID initializer=Variable_initializer?)
	 */
	protected void sequence_Variable_declarator(ISerializationContext context, Variable_declarator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable_initializer returns Variable_initializer
	 *
	 * Constraint:
	 *     (expression=Expression | (variableInitializer1=Variable_initializer variableIniatializer2+=Variable_initializer*))?
	 */
	protected void sequence_Variable_initializer(ISerializationContext context, Variable_initializer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     While_Statement returns While_Statement
	 *
	 * Constraint:
	 *     (expression=Expression statement=Statement)
	 */
	protected void sequence_While_Statement(ISerializationContext context, While_Statement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.WHILE_STATEMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.WHILE_STATEMENT__EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, JavaPackage.Literals.WHILE_STATEMENT__STATEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, JavaPackage.Literals.WHILE_STATEMENT__STATEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWhile_StatementAccess().getExpressionExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.accept(grammarAccess.getWhile_StatementAccess().getStatementStatementParserRuleCall_4_0(), semanticObject.getStatement());
		feeder.finish();
	}
	
	
}
