/*
 * generated by Xtext
 */
package org.xtext.java.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.java.services.JavaGrammarAccess;

@SuppressWarnings("all")
public class JavaSyntacticSequencer extends AbstractSyntacticSequencer {

	protected JavaGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Ampersand_Rule_EQUALTerminalRuleCall_1_1_q;
	protected AbstractElementAlias match_Creating_Expression___LeftSquareBracketRightSquareBracketKeyword_1_1_2_1_q___LeftSquareBracketKeyword_1_1_2_0_0_RightSquareBracketKeyword_1_1_2_0_1__q__p;
	protected AbstractElementAlias match_Method_declaration___LeftSquareBracketRightSquareBracketKeyword_6_1_q___LeftSquareBracketKeyword_6_0_0_RightSquareBracketKeyword_6_0_1__q__p;
	protected AbstractElementAlias match_Package_statement_EOLTerminalRuleCall_2_p;
	protected AbstractElementAlias match_Parameter___LeftSquareBracketRightSquareBracketKeyword_2_1_q___LeftSquareBracketKeyword_2_0_0_RightSquareBracketKeyword_2_0_1__q__p;
	protected AbstractElementAlias match_Statement_EOLTerminalRuleCall_13_1_or___BreakKeyword_11_1_EOLTerminalRuleCall_11_3___or___ContinueKeyword_12_1_EOLTerminalRuleCall_12_3__;
	protected AbstractElementAlias match_Switch_Statement___DEFAULTTerminalRuleCall_7_0_COLONTerminalRuleCall_7_1__q;
	protected AbstractElementAlias match_Type___LeftSquareBracketRightSquareBracketKeyword_1_1_q___LeftSquareBracketKeyword_1_0_0_RightSquareBracketKeyword_1_0_1__q__p;
	protected AbstractElementAlias match_Type_declaration_EOLTerminalRuleCall_2_q;
	protected AbstractElementAlias match_Variable_declarator___LeftSquareBracketRightSquareBracketKeyword_1_1_q___LeftSquareBracketKeyword_1_0_0_RightSquareBracketKeyword_1_0_1__q__p;
	protected AbstractElementAlias match_Variable_initializer_COMMATerminalRuleCall_1_2_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (JavaGrammarAccess) access;
		match_Ampersand_Rule_EQUALTerminalRuleCall_1_1_q = new TokenAlias(false, true, grammarAccess.getAmpersand_RuleAccess().getEQUALTerminalRuleCall_1_1());
		match_Creating_Expression___LeftSquareBracketRightSquareBracketKeyword_1_1_2_1_q___LeftSquareBracketKeyword_1_1_2_0_0_RightSquareBracketKeyword_1_1_2_0_1__q__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getCreating_ExpressionAccess().getLeftSquareBracketRightSquareBracketKeyword_1_1_2_1()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCreating_ExpressionAccess().getLeftSquareBracketKeyword_1_1_2_0_0()), new TokenAlias(false, false, grammarAccess.getCreating_ExpressionAccess().getRightSquareBracketKeyword_1_1_2_0_1())));
		match_Method_declaration___LeftSquareBracketRightSquareBracketKeyword_6_1_q___LeftSquareBracketKeyword_6_0_0_RightSquareBracketKeyword_6_0_1__q__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getMethod_declarationAccess().getLeftSquareBracketRightSquareBracketKeyword_6_1()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMethod_declarationAccess().getLeftSquareBracketKeyword_6_0_0()), new TokenAlias(false, false, grammarAccess.getMethod_declarationAccess().getRightSquareBracketKeyword_6_0_1())));
		match_Package_statement_EOLTerminalRuleCall_2_p = new TokenAlias(true, false, grammarAccess.getPackage_statementAccess().getEOLTerminalRuleCall_2());
		match_Parameter___LeftSquareBracketRightSquareBracketKeyword_2_1_q___LeftSquareBracketKeyword_2_0_0_RightSquareBracketKeyword_2_0_1__q__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getParameterAccess().getLeftSquareBracketRightSquareBracketKeyword_2_1()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getParameterAccess().getLeftSquareBracketKeyword_2_0_0()), new TokenAlias(false, false, grammarAccess.getParameterAccess().getRightSquareBracketKeyword_2_0_1())));
		match_Statement_EOLTerminalRuleCall_13_1_or___BreakKeyword_11_1_EOLTerminalRuleCall_11_3___or___ContinueKeyword_12_1_EOLTerminalRuleCall_12_3__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getBreakKeyword_11_1()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getEOLTerminalRuleCall_11_3())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getContinueKeyword_12_1()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getEOLTerminalRuleCall_12_3())), new TokenAlias(false, false, grammarAccess.getStatementAccess().getEOLTerminalRuleCall_13_1()));
		match_Switch_Statement___DEFAULTTerminalRuleCall_7_0_COLONTerminalRuleCall_7_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSwitch_StatementAccess().getDEFAULTTerminalRuleCall_7_0()), new TokenAlias(false, false, grammarAccess.getSwitch_StatementAccess().getCOLONTerminalRuleCall_7_1()));
		match_Type___LeftSquareBracketRightSquareBracketKeyword_1_1_q___LeftSquareBracketKeyword_1_0_0_RightSquareBracketKeyword_1_0_1__q__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getTypeAccess().getLeftSquareBracketRightSquareBracketKeyword_1_1()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_1_0_1())));
		match_Type_declaration_EOLTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getType_declarationAccess().getEOLTerminalRuleCall_2());
		match_Variable_declarator___LeftSquareBracketRightSquareBracketKeyword_1_1_q___LeftSquareBracketKeyword_1_0_0_RightSquareBracketKeyword_1_0_1__q__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getVariable_declaratorAccess().getLeftSquareBracketRightSquareBracketKeyword_1_1()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getVariable_declaratorAccess().getLeftSquareBracketKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getVariable_declaratorAccess().getRightSquareBracketKeyword_1_0_1())));
		match_Variable_initializer_COMMATerminalRuleCall_1_2_2_q = new TokenAlias(false, true, grammarAccess.getVariable_initializerAccess().getCOMMATerminalRuleCall_1_2_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCASERule())
			return getCASEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCOLONRule())
			return getCOLONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCOMMARule())
			return getCOMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDEFAULTRule())
			return getDEFAULTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDORule())
			return getDOToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getELSERule())
			return getELSEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEOLRule())
			return getEOLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEQUALRule())
			return getEQUALToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEXCLAMATIONRule())
			return getEXCLAMATIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEXTENDSRule())
			return getEXTENDSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFORRule())
			return getFORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIFRule())
			return getIFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIMPORTRule())
			return getIMPORTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINSTANCEOFRule())
			return getINSTANCEOFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTERFACERule())
			return getINTERFACEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMULTIPLYRule())
			return getMULTIPLYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNEWRule())
			return getNEWToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNOTRule())
			return getNOTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPACKAGERule())
			return getPACKAGEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRETURNRule())
			return getRETURNToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSWITCHRule())
			return getSWITCHToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWATRule())
			return getWATToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWHILERule())
			return getWHILEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal CASE:
	 * 	"case";
	 */
	protected String getCASEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "case";
	}
	
	/**
	 * terminal COLON:
	 * 	":";
	 */
	protected String getCOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * terminal COMMA:
	 * 	",";
	 */
	protected String getCOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal DEFAULT:
	 * 	"default";
	 */
	protected String getDEFAULTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "default";
	}
	
	/**
	 * terminal DO:
	 * 	"do";
	 */
	protected String getDOToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "do";
	}
	
	/**
	 * terminal ELSE:
	 * 	"else";
	 */
	protected String getELSEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "else";
	}
	
	/**
	 * terminal EOL:
	 * 	";";
	 */
	protected String getEOLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	/**
	 * terminal EQUAL:
	 * 	"=";
	 */
	protected String getEQUALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * terminal EXCLAMATION:
	 * 	"!";
	 */
	protected String getEXCLAMATIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "!";
	}
	
	/**
	 * terminal EXTENDS:
	 * 	"extends";
	 */
	protected String getEXTENDSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "extends";
	}
	
	/**
	 * terminal FOR:
	 * 	"for";
	 */
	protected String getFORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "for";
	}
	
	/**
	 * terminal IF:
	 * 	"if";
	 */
	protected String getIFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "if";
	}
	
	/**
	 * terminal IMPORT:
	 * 	"import";
	 */
	protected String getIMPORTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "import";
	}
	
	/**
	 * terminal INSTANCEOF:
	 * 	"instanceof";
	 */
	protected String getINSTANCEOFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "instanceof";
	}
	
	/**
	 * terminal INTERFACE:
	 * 	"interface";
	 */
	protected String getINTERFACEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "interface";
	}
	
	/**
	 * terminal MULTIPLY:
	 * 	"*";
	 */
	protected String getMULTIPLYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "*";
	}
	
	/**
	 * terminal NEW:
	 * 	"new";
	 */
	protected String getNEWToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "new";
	}
	
	/**
	 * terminal NOT:
	 * 	"~";
	 */
	protected String getNOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "~";
	}
	
	/**
	 * terminal PACKAGE:
	 * 	"package";
	 */
	protected String getPACKAGEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "package";
	}
	
	/**
	 * terminal RETURN:
	 * 	"return";
	 */
	protected String getRETURNToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "return";
	}
	
	/**
	 * terminal SWITCH:
	 * 	"switch";
	 */
	protected String getSWITCHToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "switch";
	}
	
	/**
	 * terminal WAT:
	 * 	"?";
	 */
	protected String getWATToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "?";
	}
	
	/**
	 * terminal WHILE:
	 * 	"while";
	 */
	protected String getWHILEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "while";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Ampersand_Rule_EQUALTerminalRuleCall_1_1_q.equals(syntax))
				emit_Ampersand_Rule_EQUALTerminalRuleCall_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Creating_Expression___LeftSquareBracketRightSquareBracketKeyword_1_1_2_1_q___LeftSquareBracketKeyword_1_1_2_0_0_RightSquareBracketKeyword_1_1_2_0_1__q__p.equals(syntax))
				emit_Creating_Expression___LeftSquareBracketRightSquareBracketKeyword_1_1_2_1_q___LeftSquareBracketKeyword_1_1_2_0_0_RightSquareBracketKeyword_1_1_2_0_1__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Method_declaration___LeftSquareBracketRightSquareBracketKeyword_6_1_q___LeftSquareBracketKeyword_6_0_0_RightSquareBracketKeyword_6_0_1__q__p.equals(syntax))
				emit_Method_declaration___LeftSquareBracketRightSquareBracketKeyword_6_1_q___LeftSquareBracketKeyword_6_0_0_RightSquareBracketKeyword_6_0_1__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Package_statement_EOLTerminalRuleCall_2_p.equals(syntax))
				emit_Package_statement_EOLTerminalRuleCall_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Parameter___LeftSquareBracketRightSquareBracketKeyword_2_1_q___LeftSquareBracketKeyword_2_0_0_RightSquareBracketKeyword_2_0_1__q__p.equals(syntax))
				emit_Parameter___LeftSquareBracketRightSquareBracketKeyword_2_1_q___LeftSquareBracketKeyword_2_0_0_RightSquareBracketKeyword_2_0_1__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Statement_EOLTerminalRuleCall_13_1_or___BreakKeyword_11_1_EOLTerminalRuleCall_11_3___or___ContinueKeyword_12_1_EOLTerminalRuleCall_12_3__.equals(syntax))
				emit_Statement_EOLTerminalRuleCall_13_1_or___BreakKeyword_11_1_EOLTerminalRuleCall_11_3___or___ContinueKeyword_12_1_EOLTerminalRuleCall_12_3__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Switch_Statement___DEFAULTTerminalRuleCall_7_0_COLONTerminalRuleCall_7_1__q.equals(syntax))
				emit_Switch_Statement___DEFAULTTerminalRuleCall_7_0_COLONTerminalRuleCall_7_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Type___LeftSquareBracketRightSquareBracketKeyword_1_1_q___LeftSquareBracketKeyword_1_0_0_RightSquareBracketKeyword_1_0_1__q__p.equals(syntax))
				emit_Type___LeftSquareBracketRightSquareBracketKeyword_1_1_q___LeftSquareBracketKeyword_1_0_0_RightSquareBracketKeyword_1_0_1__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Type_declaration_EOLTerminalRuleCall_2_q.equals(syntax))
				emit_Type_declaration_EOLTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Variable_declarator___LeftSquareBracketRightSquareBracketKeyword_1_1_q___LeftSquareBracketKeyword_1_0_0_RightSquareBracketKeyword_1_0_1__q__p.equals(syntax))
				emit_Variable_declarator___LeftSquareBracketRightSquareBracketKeyword_1_1_q___LeftSquareBracketKeyword_1_0_0_RightSquareBracketKeyword_1_0_1__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Variable_initializer_COMMATerminalRuleCall_1_2_2_q.equals(syntax))
				emit_Variable_initializer_COMMATerminalRuleCall_1_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     EQUAL?
	 *
	 * This ambiguous syntax occurs at:
	 *     a1=AMPERSAND (ambiguity) (rule end)
	 */
	protected void emit_Ampersand_Rule_EQUALTerminalRuleCall_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[]'? ('[' ']')?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     expression=Expression ']' (ambiguity) (rule end)
	 *     typeSpecifier=Type_specifier (ambiguity) (rule end)
	 */
	protected void emit_Creating_Expression___LeftSquareBracketRightSquareBracketKeyword_1_1_2_1_q___LeftSquareBracketKeyword_1_1_2_0_0_RightSquareBracketKeyword_1_1_2_0_1__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[]'? ('[' ']')?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '(' ')' (ambiguity) debug=EOL
	 *     name=ID '(' ')' (ambiguity) statement=Statement_block
	 *     parameter=Parameter_list ')' (ambiguity) debug=EOL
	 *     parameter=Parameter_list ')' (ambiguity) statement=Statement_block
	 */
	protected void emit_Method_declaration___LeftSquareBracketRightSquareBracketKeyword_6_1_q___LeftSquareBracketKeyword_6_0_0_RightSquareBracketKeyword_6_0_1__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EOL+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Package_name (ambiguity) (rule end)
	 */
	protected void emit_Package_statement_EOLTerminalRuleCall_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[]'? ('[' ']')?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_Parameter___LeftSquareBracketRightSquareBracketKeyword_2_1_q___LeftSquareBracketKeyword_2_0_0_RightSquareBracketKeyword_2_0_1__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('break' EOL) | ('continue' EOL) | EOL
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Statement_EOLTerminalRuleCall_13_1_or___BreakKeyword_11_1_EOLTerminalRuleCall_11_3___or___ContinueKeyword_12_1_EOLTerminalRuleCall_12_3__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (DEFAULT COLON)?
	 *
	 * This ambiguous syntax occurs at:
	 *     case_exp+=Expression COLON (ambiguity) '}' (rule end)
	 *     case_exp+=Expression COLON (ambiguity) CASE case_exp+=Expression
	 *     case_exp+=Expression COLON (ambiguity) statements+=Statement
	 *     statements+=Statement (ambiguity) '}' (rule end)
	 *     statements+=Statement (ambiguity) CASE case_exp+=Expression
	 *     statements+=Statement (ambiguity) statements+=Statement
	 *     sw_exp=Expression ')' '{' (ambiguity) '}' (rule end)
	 *     sw_exp=Expression ')' '{' (ambiguity) CASE case_exp+=Expression
	 *     sw_exp=Expression ')' '{' (ambiguity) statements+=Statement
	 */
	protected void emit_Switch_Statement___DEFAULTTerminalRuleCall_7_0_COLONTerminalRuleCall_7_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[]'? ('[' ']')?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Type_specifier (ambiguity) (rule end)
	 */
	protected void emit_Type___LeftSquareBracketRightSquareBracketKeyword_1_1_q___LeftSquareBracketKeyword_1_0_0_RightSquareBracketKeyword_1_0_1__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EOL?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Class_declaration (ambiguity) (rule end)
	 *     name=Interface_declaration (ambiguity) (rule end)
	 */
	protected void emit_Type_declaration_EOLTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[]'? ('[' ']')?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 *     name=ID (ambiguity) EQUAL initializer=Variable_initializer
	 */
	protected void emit_Variable_declarator___LeftSquareBracketRightSquareBracketKeyword_1_1_q___LeftSquareBracketKeyword_1_0_0_RightSquareBracketKeyword_1_0_1__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     COMMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     variableIniatializer2+=Variable_initializer (ambiguity) '}' (rule end)
	 *     variableInitializer1=Variable_initializer (ambiguity) '}' (rule end)
	 */
	protected void emit_Variable_initializer_COMMATerminalRuleCall_1_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
